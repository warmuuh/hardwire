package {{packageName}};

import javax.annotation.Generated;


@Generated("wrm.hardwire.processor.AnnotationProcessor")
public {{#abstract}}abstract{{/abstract}} class {{className}} {
	{{#references}}
	protected {{packageName}}.{{className}} {{name}};
	{{/references}}
	{{#classes}}
	private {{packageName}}.{{name}} _{{name}};	
	{{#abstr}}
	protected abstract {{packageName}}.{{name}} create{{name}}();
	{{/abstr}}
	{{^abstr}}
	protected {{packageName}}.{{name}} create{{name}}(){
		return new {{packageName}}.{{name}}(
		{{#decoratedConstructorArguments}}
			{{#value}}{{#moduleRef}}{{.}}.{{/moduleRef}}get{{type.name}}(){{/value}}{{^last}},{{/last}}
		{{/decoratedConstructorArguments}}
		);
	}
	{{/abstr}}
	protected void wire{{name}}({{packageName}}.{{name}} v{{name}}){
		{{#fields}}
		v{{name}}.set{{setterName}}({{#moduleRef}}{{.}}.{{/moduleRef}}get{{type.name}}());
		{{/fields}}
	}
	public {{packageName}}.{{name}} get{{name}}(){
		if (_{{name}} == null) {
			_{{name}} = create{{name}}();
			wire{{name}}(_{{name}});
		}
		return _{{name}};
	}
	{{/classes}}
	
	
	
    public void reference({{#references}}{{packageName}}.{{className}} {{name}}{{^last}},{{/last}}{{/references}})
    {
        {{#references}}
        this.{{name}} = {{name}};
        {{/references}}
    }
	
	public void start()	{
		
		{{#references}}
        assert this.{{name}} != null : "Reference to {{packageName}}.{{className}} is missing. Did you forget to call reference(...)?";
        {{/references}}
        
		onStart();
		{{#classes}}
		get{{name}}();
		{{/classes}}
		
		onPostConstruct();
		{{#classes}}{{#postConstructMethods}}
		get{{type.name}}().{{name}}();
		{{/postConstructMethods}}{{/classes}}
	
		onInitialized();
	}
	
	protected void onStart(){};
	protected void onPostConstruct(){};
	protected void onInitialized(){};
}
